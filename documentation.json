{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "BadgeComponent",
            "id": "component-BadgeComponent-53f2bc20cc2d4f5e953a969fb3a71a78",
            "file": "projects/tagme-components/src/lib/badge/badge.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tg-badge",
            "styleUrls": [
                "./badge.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./badge.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>Background color</p>\n",
                    "line": 12,
                    "type": "string"
                },
                {
                    "name": "text",
                    "description": "<p>Text of the badge</p>\n",
                    "line": 17,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n\tselector: 'tg-badge',\n\ttemplateUrl: './badge.component.html',\n\tstyleUrls: ['./badge.component.scss'],\n})\nexport class BadgeComponent {\n\t/**\n\t * Background color\n\t */\n\t@Input() backgroundColor: string;\n\n\t/**\n\t * Text of the badge\n\t */\n\t@Input() text: string;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../global.scss';\n\n.badge {\n\tbackground-color: $main-orange;\n\tborder-radius: 3px;\n\tcolor: $white;\n\tfont: $main-font-2x-regular;\n\tpadding: 2px;\n\ttext-align: center;\n}",
                    "styleUrl": "./badge.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<span \n\tclass=\"badge\" \n\t[ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n\t{{ text }}\n</span>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-b3935643b1e142ba802b55b102b480e9",
            "file": "projects/tagme-components/src/lib/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tg-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "customStyles",
                    "line": 10,
                    "type": "string"
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 12,
                    "type": "boolean"
                },
                {
                    "name": "small",
                    "defaultValue": "false",
                    "line": 14,
                    "type": "boolean"
                },
                {
                    "name": "text",
                    "line": 16,
                    "type": "string"
                },
                {
                    "name": "type",
                    "defaultValue": "'main'",
                    "line": 24,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "clickEmitter",
                    "defaultValue": "new EventEmitter()",
                    "line": 27,
                    "type": "EventEmitter<null>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "emitClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n\tselector: 'tg-button',\n\ttemplateUrl: './button.component.html',\n\tstyleUrls: ['./button.component.scss'],\n})\nexport class ButtonComponent {\n\t// Injects a style in the property style\n\t@Input() customStyles: string;\n\t// Disables the button\n\t@Input() disabled: boolean = false;\n\t// Decreases the height of the button\n\t@Input() small: boolean = false;\n\t// Sets the text of the button\n\t@Input() text: string;\n\t// Chooses the type. It can be:\n\t// main\n\t// success\n\t// outline-main\n\t// outline-success\n\t// white\n\t// black\n\t@Input() type: string = 'main';\n\n\t// Emitter of the click\n\t@Output() clickEmitter: EventEmitter<null> = new EventEmitter();\n\n\t// Emits the action of click\n\tpublic emitClick(): void {\n\t\tif (!this.disabled) {\n\t\t\tthis.clickEmitter.emit(null);\n\t\t}\n\t}\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../global.scss';\n\n.button {\n\tborder: none;\n\tborder-radius: 3px;\n\tfont: $main-font-2x-regular;\n\tpadding: 14px 0;\n\twidth: 100%;\n\n\t&--main {\n\t\tbackground-color: $main-orange;\n\t\tcolor: $white;\n\n\t\t&--disabled {\n\t\t\tbackground-color: $medium-orange;\n\t\t\tcursor: not-allowed;\n\t\t}\n\t}\n\n\t&--success {\n\t\tbackground-color: $green;\n\t\tcolor: $white;\n\n\t\t&--disabled {\n\t\t\tbackground-color: $medium-green;\n\t\t\tcursor: not-allowed;\n\t\t}\n\t}\n\n\t&--outline-main {\n\t\tbackground-color: transparent;\n\t\tborder: 2px solid $main-orange;\n\t\tbox-sizing: border-box;\n\t\tcolor: $main-orange;\n\n\t\t&--disabled {\n\t\t\tborder-color: $medium-orange;\n\t\t\tcolor: $medium-orange;\n\t\t\tcursor: not-allowed;\n\t\t}\n\t}\n\n\t&--outline-success {\n\t\tbackground-color: transparent;\n\t\tborder: 2px solid $green;\n\t\tbox-sizing: border-box;\n\t\tcolor: $green;\n\n\t\t&--disabled {\n\t\t\tborder-color: $medium-green;\n\t\t\tcolor: $medium-green;\n\t\t\tcursor: not-allowed;\n\t\t}\n\t}\n\n\t&--white {\n\t\tbackground-color: $white;\n\t\tborder: 1px solid $medium-gray;\n\t\tbox-sizing: border-box;\n\t\tcolor: $black;\n\n\t\t&--disabled {\n\t\t\tborder-color: $light-gray;\n\t\t\tcolor: $gray;\n\t\t\tcursor: not-allowed;\n\t\t}\n\t}\n\n\t&--black {\n\t\tbackground-color: $black;\n\t\tcolor: $white;\n\n\t\t&--disabled {\n\t\t\tbackground-color: $medium-gray;\n\t\t\tcolor: $white;\n\t\t}\n\t}\n\n\t&--small {\n\t\tpadding: 6px 0;\n\t}\n}",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<button\n\tclass=\"button\"\n\t(click)=\"emitClick()\"\n\t[ngClass]=\"{\n\t\t'button--main': type === 'main',\n\t\t'button--main--disabled': type === 'main' && disabled,\n\t\t'button--success': type === 'success',\n\t\t'button--success--disabled': type === 'success' && disabled,\n\t\t'button--outline-main': type === 'outline-main',\n\t\t'button--outline-main--disabled': type === 'outline-main' && disabled,\n\t\t'button--outline-success': type === 'outline-success',\n\t\t'button--outline-success--disabled': type === 'outline-success' && disabled,\n\t\t'button--white': type === 'white',\n\t\t'button--white--disabled': type === 'white' && disabled,\n\t\t'button--black': type === 'black',\n\t\t'button--black--disabled': type === 'black' && disabled,\n\t\t'button--small': small\n\t}\"\n\t[style]=\"customStyles\"\n>\n\t{{ text }}\n</button>"
        },
        {
            "name": "CounterComponent",
            "id": "component-CounterComponent-8477364a3d49d23d43460a1564718963",
            "file": "projects/tagme-components/src/lib/counter/counter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tg-counter",
            "styleUrls": [
                "./counter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./counter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "big",
                    "defaultValue": "false",
                    "line": 10,
                    "type": "boolean"
                },
                {
                    "name": "color",
                    "defaultValue": "'#FF7F40'",
                    "line": 12,
                    "type": "string"
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 14,
                    "type": "boolean"
                },
                {
                    "name": "max",
                    "defaultValue": "99",
                    "line": 16,
                    "type": "number"
                },
                {
                    "name": "min",
                    "defaultValue": "0",
                    "line": 18,
                    "type": "number"
                },
                {
                    "name": "value",
                    "defaultValue": "0",
                    "line": 20,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "valueEmitter",
                    "defaultValue": "new EventEmitter<number>()",
                    "line": 23,
                    "type": "EventEmitter<number>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "add",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "emitValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "subtract",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n\tselector: 'tg-counter',\n\ttemplateUrl: './counter.component.html',\n\tstyleUrls: ['./counter.component.scss'],\n})\nexport class CounterComponent {\n\t// Increases the height of the component\n\t@Input() big: boolean = false;\n\t// Changes the color of icons\n\t@Input() color: string = '#FF7F40';\n\t// Turn off the component\n\t@Input() disabled: boolean = false;\n\t// Sets the max value of the counter\n\t@Input() max: number = 99;\n\t// Sets the min value of the counter\n\t@Input() min: number = 0;\n\t// Sets the default value of the counter\n\t@Input() value: number = 0;\n\n\t// Emitter of the value\n\t@Output() valueEmitter: EventEmitter<number> = new EventEmitter<number>();\n\n\t// Adds 1 to the value if it's not disabled and it's less than the max\n\tpublic add(): void {\n\t\tif (!this.disabled && this.value < this.max) {\n\t\t\tthis.value++;\n\t\t}\n\t}\n\n\t// Subtracts 1 to the value if it's not disabled and it's grater than the min\n\tpublic subtract(): void {\n\t\tif (!this.disabled && this.value > this.min) {\n\t\t\tthis.value--;\n\t\t}\n\t}\n\n\t// Emits the value\n\tpublic emitValue(): void {\n\t\tthis.valueEmitter.emit(this.value);\n\t}\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../global.scss';\n\n.counter {\n\tbackground-color: $white;\n\tborder: 1px solid $medium-gray;\n  border-radius: 3px;\n\tbox-sizing: border-box;\n\tdisplay: flex;\n\n\t&__icon {\n\t\talign-items: center;\n\t\tcursor: pointer;\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\tmin-width: 30px;\n\n\t\t&--disabled {\n\t\t\tcursor: not-allowed;\n\t\t}\n\t}\n\n\t&__value {\n\t\tborder-left: 1px solid $medium-gray;\n\t\tborder-right: 1px solid $medium-gray;\n\t\tflex: 1;\n\t\tfont: $main-font-2x-regular;\n\t\tpadding: 6px 0;\n\t\ttext-align: center;\n\n\t\t&--colorized {\n\t\t\tbackground-color: $light-golden;\n\t\t}\n\n\t\t&--big {\n\t\t\tpadding: 14px 0;\n\t\t}\n\t}\n}\n",
                    "styleUrl": "./counter.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"counter\">\n\t<tg-icon\n\t\tclass=\"counter__icon\"\n\t\t(click)=\"subtract(); emitValue()\"\n\t\tcolor=\"{{ disabled || value === min ? '#EAEAEA' : color }}\"\n\t\tname=\"minus_24\"\n\t\t*ngIf=\"value !== min + 1\"\n\t\t[ngClass]=\"{ 'counter__icon--disabled': value === min }\"\n\t></tg-icon>\n\t<tg-icon\n\t\tclass=\"counter__icon\"\n\t\t(click)=\"subtract(); emitValue()\"\n\t\tcolor=\"{{ disabled ? '#EAEAEA' : color }}\"\n\t\tname=\"trash_24\"\n\t\t*ngIf=\"value === min + 1\"\n\t></tg-icon>\n\t<div\n\t\tclass=\"counter__value\"\n\t\t[ngClass]=\"{ \n\t\t\t'counter__value--big': big,\n\t\t\t'counter__value--colorized':  value > min\n\t\t}\"\n\t>{{ value }}</div>\n\t<tg-icon\n\t\tclass=\"counter__icon\"\n\t\t(click)=\"add(); emitValue()\"\n\t\tcolor=\"{{ disabled || value === max ? '#EAEAEA' : color }}\"\n\t\tname=\"plus_24\"\n\t\t[ngClass]=\"{ 'counter__icon--disabled': value === max }\"\n\t></tg-icon>\n</div>\n"
        },
        {
            "name": "IconComponent",
            "id": "component-IconComponent-880a5945d10c8b8560d600a579bc74fa",
            "file": "projects/tagme-components/src/lib/icon/icon.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tg-icon",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./icon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'#30323B'",
                    "line": 16,
                    "type": "string"
                },
                {
                    "name": "name",
                    "line": 11,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "icons",
                    "defaultValue": "{\n\t\tplus_24: '<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><rect x=\"11\" y=\"7\" width=\"2\" height=\"10\"/><rect x=\"7\" y=\"11\" width=\"10\" height=\"2\" /></svg>',\n\t\tminus_24: '<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><rect x=\"7\" y=\"11\" width=\"10\" height=\"2\"/></svg>',\n\t\ttrash_24: '<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><mask id=\"mask0\" mask-type=\"alpha\" maskUnits=\"userSpaceOnUse\" x=\"7\" y=\"11\" width=\"10\" height=\"10\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M7 11H17V21H7V11Z\" /></mask><g mask=\"url(#mask0)\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M9.01699 19.7935H14.983L15.8048 12.2065H8.19521L9.01699 19.7935ZM15.1936 21H8.80637C8.30578 21 7.89602 20.5894 7.87493 20.0764L7.00364 12.0324C7.00122 12.0101 7 11.9876 7 11.9652C7 11.433 7.41823 11 7.93232 11H16.0677C16.5818 11 17 11.433 17 11.9652C17 11.9876 16.9988 12.0101 16.9964 12.0324L16.1251 20.0764C16.104 20.5894 15.6943 21 15.1936 21Z\" /></g><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M8.39995 8.8024L15.4487 7.83517L14.9456 7.13088L8.67162 7.99181L8.39995 8.8024ZM16.1581 8.86492L8.02775 9.98056C7.93167 9.99375 7.78712 10.0071 7.64411 9.9957C7.55658 9.98875 7.47997 9.97342 7.40998 9.94885C7.18612 9.87021 7.03283 9.69486 7 9.47983L7.02154 9.23109L7.61975 7.44605C7.66455 7.24379 7.84293 6.97846 8.44835 6.89538L14.8317 6.01946C14.9277 6.00627 15.0723 5.99294 15.2153 6.00429C15.3028 6.01123 15.3794 6.02657 15.4494 6.05113C15.5998 6.10395 15.7183 6.20035 15.7898 6.32313L16.8987 7.87572L16.9938 8.10845C17.0164 8.25592 17.0227 8.74626 16.1581 8.86492Z\" /><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M10.7095 6.7861L10.562 5.78627L12.3468 5.53273L12.4943 6.53256L14 6.31866L13.8089 5.02334C13.7128 4.37152 13.0941 3.91804 12.4299 4.01243L10.0429 4.35152C9.37864 4.44587 8.9165 5.0529 9.01266 5.70468L9.20379 7L10.7095 6.7861Z\" /></svg>'\n\t}",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "chooseIcon",
                    "args": [
                        {
                            "name": "iconName",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "iconName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fillIcon",
                    "args": [
                        {
                            "name": "color",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ElementRef, Input, OnInit } from '@angular/core';\n\n@Component({\n\tselector: 'tg-icon',\n\ttemplateUrl: './icon.component.html',\n\tchangeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class IconComponent implements OnInit {\n\t// Sets the type of icon with it's name\n\t@Input() \n\tset name(iconName: string) {\n\t\tthis.chooseIcon(iconName);\n\t}\n\n\t// Sets the color of the icon\n\t@Input() color: string = '#30323B';\n\n\t// Fills the icon when it's created\n\tngOnInit(): void {\n\t\tthis.fillIcon(this.color);\n\t}\n\n\t// List of icons\n\tprivate icons = {\n\t\tplus_24: '<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><rect x=\"11\" y=\"7\" width=\"2\" height=\"10\"/><rect x=\"7\" y=\"11\" width=\"10\" height=\"2\" /></svg>',\n\t\tminus_24: '<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><rect x=\"7\" y=\"11\" width=\"10\" height=\"2\"/></svg>',\n\t\ttrash_24: '<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><mask id=\"mask0\" mask-type=\"alpha\" maskUnits=\"userSpaceOnUse\" x=\"7\" y=\"11\" width=\"10\" height=\"10\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M7 11H17V21H7V11Z\" /></mask><g mask=\"url(#mask0)\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M9.01699 19.7935H14.983L15.8048 12.2065H8.19521L9.01699 19.7935ZM15.1936 21H8.80637C8.30578 21 7.89602 20.5894 7.87493 20.0764L7.00364 12.0324C7.00122 12.0101 7 11.9876 7 11.9652C7 11.433 7.41823 11 7.93232 11H16.0677C16.5818 11 17 11.433 17 11.9652C17 11.9876 16.9988 12.0101 16.9964 12.0324L16.1251 20.0764C16.104 20.5894 15.6943 21 15.1936 21Z\" /></g><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M8.39995 8.8024L15.4487 7.83517L14.9456 7.13088L8.67162 7.99181L8.39995 8.8024ZM16.1581 8.86492L8.02775 9.98056C7.93167 9.99375 7.78712 10.0071 7.64411 9.9957C7.55658 9.98875 7.47997 9.97342 7.40998 9.94885C7.18612 9.87021 7.03283 9.69486 7 9.47983L7.02154 9.23109L7.61975 7.44605C7.66455 7.24379 7.84293 6.97846 8.44835 6.89538L14.8317 6.01946C14.9277 6.00627 15.0723 5.99294 15.2153 6.00429C15.3028 6.01123 15.3794 6.02657 15.4494 6.05113C15.5998 6.10395 15.7183 6.20035 15.7898 6.32313L16.8987 7.87572L16.9938 8.10845C17.0164 8.25592 17.0227 8.74626 16.1581 8.86492Z\" /><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M10.7095 6.7861L10.562 5.78627L12.3468 5.53273L12.4943 6.53256L14 6.31866L13.8089 5.02334C13.7128 4.37152 13.0941 3.91804 12.4299 4.01243L10.0429 4.35152C9.37864 4.44587 8.9165 5.0529 9.01266 5.70468L9.20379 7L10.7095 6.7861Z\" /></svg>'\n\t};\n\n\t// Injects the ElementRef to allow the access to the HTML element\n\tconstructor(private element: ElementRef) {}\n\n\t// Injects in the HTML element the svg icon\n\tprivate chooseIcon(iconName: string): void {\n\t\tthis.element.nativeElement.innerHTML = this.icons[iconName] || null;\n\t}\n\n\t// Fills the icon with a color\n\tprivate fillIcon(color: string): void {\n\t\tthis.element?.nativeElement?.firstChild?.childNodes.forEach(element => {\n\t\t\telement.style.fill = color;\n\t\t});\n\t}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "element",
                        "type": "ElementRef"
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "name": {
                    "name": "name",
                    "setSignature": {
                        "name": "name",
                        "type": "void",
                        "args": [
                            {
                                "name": "iconName",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 11,
                        "jsdoctags": [
                            {
                                "name": "iconName",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<ng-content></ng-content>"
        },
        {
            "name": "LinkComponent",
            "id": "component-LinkComponent-5cae3c03586552b2da76ebdcb489da7f",
            "file": "projects/tagme-components/src/lib/link/link.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tg-link",
            "styleUrls": [
                "./link.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./link.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "customStyles",
                    "line": 10,
                    "type": "string"
                },
                {
                    "name": "queryParams",
                    "line": 12,
                    "type": "literal type"
                },
                {
                    "name": "routerLink",
                    "line": 16,
                    "type": "string | any[]"
                },
                {
                    "name": "state",
                    "line": 18,
                    "type": "literal type"
                },
                {
                    "name": "text",
                    "line": 22,
                    "type": "string"
                },
                {
                    "name": "type",
                    "defaultValue": "'default'",
                    "line": 30,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n\tselector: 'tg-link',\n\ttemplateUrl: './link.component.html',\n\tstyleUrls: ['./link.component.scss']\n})\nexport class LinkComponent {\n\t// Injects a style in the property style\n\t@Input() customStyles: string;\n\t// (Optional) Query params of the link\n\t@Input() queryParams?: {\n\t\t[k: string]: any;\n\t};\n\t// Destination of the link\n\t@Input() routerLink: string | any[];\n\t// (Optional) State for the destination\n\t@Input() state?: {\n\t\t[k: string]: any;\n\t};\n\t// Text of the link\n\t@Input() text: string;\n\t// Type of the link. It can be:\n\t// default\n\t// default-underline\n\t// small\n\t// small-underline\n\t// button\n\t// small-button\n\t@Input() type: string = 'default';\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../global.scss';\n\n.link {\n\tcolor: $main-orange;\n\ttext-decoration: none;\n\n\t&--default {\n\t\tfont: $main-font-2x-semibold;\n\n\t\t&--underline {\n\t\t\ttext-decoration: underline;\n\t\t}\n\t}\n\n\t&--small {\n\t\tfont: $main-font-1x-semibold;\n\n\t\t&--underline {\n\t\t\ttext-decoration: underline;\n\t\t}\n\t}\n\n\t&--button {\n\t\tborder: 1px solid $medium-gray;\n\t\tbox-sizing: border-box;\n\t\tborder-radius: 3px;\n\t\tdisplay: block;\n\t\tfont: $main-font-2x-semibold;\n\t\tpadding: 14px 0;\n\t\ttext-align: center;\n\n\t\t&--small {\n\t\t\tfont: $main-font-2x-regular;\n\t\t\tpadding: 6px 0;\n\t\t}\n\t}\n}",
                    "styleUrl": "./link.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<a\n\tclass=\"link\"\n\t[ngClass]=\"{\n\t\t'link--default': type === 'default' || type === 'default-underline',\n\t\t'link--default--underline': type === 'default-underline',\n\t\t'link--small': type === 'small' || type === 'small-underline',\n\t\t'link--small--underline': type === 'small-underline',\n\t\t'link--button': type === 'button' || type === 'small-button',\n\t\t'link--button--small': type === 'small-button'\n\t}\"\n\t[queryParams]=\"queryParams\" \n\t[routerLink]=\"routerLink\" \n\t[state]=\"state\"\n\t[style]=\"customStyles\"\n>\n\t{{ text }}\n</a>"
        }
    ],
    "modules": [
        {
            "name": "BadgeModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BadgeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BadgeComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ButtonModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CounterModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CounterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CounterComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IconModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "IconComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "IconComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LinkModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LinkComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LinkComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tagme-components/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Badge.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Counter.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Link.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tagme-components/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Badge.stories.ts",
                "type": "",
                "defaultValue": "(args: BadgeComponent) => ({\n\tcomponent: BadgeComponent,\n\tprops: args\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "type": "",
                "defaultValue": "(args: ButtonComponent) => ({\n  component: ButtonComponent,\n  props: args\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Counter.stories.ts",
                "type": "",
                "defaultValue": "(args: CounterComponent) => ({\n\tcomponent: CounterComponent,\n\tprops: args\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Link.stories.ts",
                "type": "",
                "defaultValue": "(args: LinkComponent) => ({\n\tcomponent: LinkComponent,\n\tprops: args\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "projects/tagme-components/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tagme-components/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tagme-components/src/test.ts",
                    "type": "literal type"
                }
            ],
            "stories/Badge.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Badge.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Badge.stories.ts",
                    "type": "",
                    "defaultValue": "(args: BadgeComponent) => ({\n\tcomponent: BadgeComponent,\n\tprops: args\n})"
                }
            ],
            "stories/Button.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "(args: ButtonComponent) => ({\n  component: ButtonComponent,\n  props: args\n})"
                }
            ],
            "stories/Counter.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Counter.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Counter.stories.ts",
                    "type": "",
                    "defaultValue": "(args: CounterComponent) => ({\n\tcomponent: CounterComponent,\n\tprops: args\n})"
                }
            ],
            "stories/Link.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Link.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Link.stories.ts",
                    "type": "",
                    "defaultValue": "(args: LinkComponent) => ({\n\tcomponent: LinkComponent,\n\tprops: args\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 4,
        "status": "low",
        "files": [
            {
                "filePath": "projects/tagme-components/src/lib/badge/badge.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BadgeComponent",
                "coveragePercent": 66,
                "coverageCount": "2/3",
                "status": "good"
            },
            {
                "filePath": "projects/tagme-components/src/lib/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/tagme-components/src/lib/counter/counter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CounterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/tagme-components/src/lib/icon/icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/tagme-components/src/lib/link/link.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LinkComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/tagme-components/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tagme-components/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Counter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Counter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}